#org.quartz.scheduler.instanceName = MyScheduler
#org.quartz.threadPool.threadCount = 3
#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
#============================================================================
# Configure Main Scheduler Properties  
#============================================================================

#org.quartz.scheduler.instanceName = BrotecIcafal_Scheduler
org.quartz.scheduler.instanceName = Godesk_Scheduler
org.quartz.scheduler.instanceId = AUTO

#============================================================================
# Configure ThreadPool  
#============================================================================

org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 15
org.quartz.threadPool.threadPriority = 3

#============================================================================
# Configure JobStore  
#============================================================================

org.quartz.jobStore.misfireThreshold = 60000

#============================================================================
#JobStoreCMT relies upon transactions being managed by the application which is using Quartz. 
#A JTA transaction must be in progress before attempt to schedule (or unschedule) jobs/triggers. 
#This allows the "work" of scheduling to be part of the applications "larger" transaction. 
#JobStoreCMT actually requires the use of two datasources - one that has it's connection's 
#transactions managed by the application server (via JTA) and one datasource that has connections 
#that do not participate in global (JTA) transactions. 
#JobStoreCMT is appropriate when applications are using JTA transactions (such as via EJB Session Beans) to perform their work.
#org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreCMT
#===
#JobStoreTX manages all transactions itself by calling commit() (or rollback()) on the database 
#connection after every action (such as the addition of a job). JDBCJobStore is appropriate if 
#you are using Quartz in a stand-alone application, 
#or within a servlet container if the application is not using JTA transactions.
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
#============================================================================

org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
#============================================================================
# The "org.quartz.jobStore.useProperties" config parameter can be set to "true" (defaults to false) in order to instruct JDBCJobStore 
#that all values in JobDataMaps will be Strings, and therefore can be stored as name-value pairs, rather than storing more complex objects 
#in their serialized form in the BLOB column. This is much safer in the long term, as you avoid the class versioning issues that there 
#are with serializing your non-String classes into a BLOB.
org.quartz.jobStore.useProperties = true
#============================================================================
org.quartz.jobStore.dataSource = godesk_quartz_ds
#org.quartz.jobStore.nonManagedTXDataSource = nonManagedTxDs
org.quartz.jobStore.tablePrefix = QRTZ_

org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 60000
#org.quartz.jobStore.acquireTriggersWithinLock = true

#============================================================================
# Configure Datasources  
#============================================================================
#Multitenant
org.quartz.dataSource.godesk_quartz_ds.jndiURL=jdbc/godesk_quartz
#org.quartz.dataSource.nonManagedTxDs.jndiURL=jdbc/brotecnonManagedTXDS
#brotec ds
#org.quartz.dataSource.godesk_quartz_ds.jndiURL=jdbc/brotec
#godesk ds
#org.quartz.dataSource.godesk_quartz_ds.jndiURL=jdbc/godesk_db_ds
#beltec ds
#org.quartz.dataSource.godesk_quartz_ds.jndiURL=jdbc/beltec
#monte-elqui ds
#org.quartz.dataSource.godesk_quartz_ds.jndiURL=jdbc/monte_elqui
#betterlife
#org.quartz.dataSource.godesk_quartz_ds.jndiURL=jdbc/betterlife
